---
title: DVD Screensaver
---
Here we define our imports
```cpp
#include <wasm.h>
```

Here we define the external functions which are defined in the javascript

```cpp
WASM_IMPORT void draw_rect(int x, int y, int width, int height);
WASM_IMPORT void clear_rect(int x, int y, int width, int height);
```

Let us then define a class for our square as follows

```cpp
class Square {
  public:
    float x;
    float y;
    int size; 

    Square(float x=0, float y=0, int size=50) : x(x), y(y), size(size) {}
    
    void render() {
      draw_rect(x, y, size, size);
    }
};
```

Here we can define our global variables which are going to be available throughout the program scope

```cpp
int screenWidth;
int screenHeight;
float vx;
float vy;
Square square;
```

Here we define our local functions which will be used in our wasm file
For programs like this which interact with the canvas we use the setup, draw, update loop since it is easy to interface with our javascript

```cpp
WASM_EXPORT void setup(int w, int h) { // Here is all our initial setup
  int size = 50;

  screenWidth = w;
  screenHeight = h;

  square = Square(screenWidth/2 - (size/2), screenHeight/2 - (size/2), size);

  // Distance traveled per second
  vx = screenWidth/2;
  vy = screenHeight/2;
}

WASM_EXPORT void draw() { // Here we do all our draw calls
  clear_rect(0, 0, screenWidth, screenHeight);
  square.render();
}

WASM_EXPORT void update(float dt) { // Here is all the update logic
  square.x += vx*dt;
  square.y += vy*dt;

  if (square.x > screenWidth-50 || square.x < 0) {
    vx = -vx;
  }
  if (square.y > screenHeight-50 || square.y < 0) {
    vy = -vy;
  }
}
```

To interface with the wasm generated by this file we create the following javascript (defined in the file `index.js`)

```{.js}
{{< include index.js >}}
```

For more complicated projects you can move the html code outside the project, especially if you want to display it to the enduser since it is duplicated takiung care to ignore the extra backticks around the double curly braces

````
```{.html}
`{{< include external.html >}}`
```
```{=html}
`{{< include external.html >}}`
```
````

But for our usecase we can just do include the minimal code needed bellow twice 

```{.html}
<canvas id="wasmCanvas" width=600 height=400 style="background: #182546"></canvas>
<script src="./index.js"></script>
```

```{=html}
<canvas id="wasmCanvas" width=600 height=400 style="background: #182546"></canvas>
<script src="./index.js"></script>
```
